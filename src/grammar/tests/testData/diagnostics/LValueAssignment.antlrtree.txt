File: LValueAssignment.kt (WITH_ERRORS)
  packageHeader
    PACKAGE("package")
    identifier
      simpleIdentifier
        Identifier("lvalue_assignment")
    semi
      NL("\n")
      NL("\n")
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            inheritanceModifier
              OPEN("open")
        CLASS("class")
        simpleIdentifier
          Identifier("B")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAR("var")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("b")
                    COLON(":")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Int")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("2")
                  NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAL("val")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("c")
                    COLON(":")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Int")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("34")
                  NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("C")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              constructorInvocation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("B")
                valueArguments
                  LPAREN("(")
                  RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("4")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("c")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("C")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  THIS("this")
  DOT(".")
  Identifier("x")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  THIS("this")
  DOT(".")
  Identifier("b")
  ASSIGNMENT("=")
  IntegerLiteral("123")
  NL("\n")
  SUPER("super")
  DOT(".")
  Identifier("b")
  ASSIGNMENT("=")
  IntegerLiteral("23")
  NL("\n")
  THIS("this")
  DOT(".")
  Identifier("c")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  SUPER("super")
  DOT(".")
  Identifier("c")
  ASSIGNMENT("=")
  IntegerLiteral("3535")
  NL("\n")
  NL("\n")
  Identifier("getInt")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo1")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("c")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("C")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                assignment
                  directlyAssignableExpression
                    postfixUnaryExpression
                      primaryExpression
                        superExpression
                          SUPER("super")
                    assignableSuffix
                      navigationSuffix
                        memberAccessOperator
                          DOT(".")
                        simpleIdentifier
                          Identifier("c")
                  ASSIGNMENT("=")
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("34")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("bar")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("c")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("C")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  THIS("this")
  ASSIGNMENT("=")
  Identifier("c")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("getInt")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("0")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("D")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            classModifier
              INNER("inner")
        CLASS("class")
        simpleIdentifier
          Identifier("B")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  THIS_AT("this@D")
  ASSIGNMENT("=")
  Identifier("D")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Unit")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("cannotBe")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("i")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("5")
    semis
      NL("\n")
      NL("\n")
  Identifier("z")
  ASSIGNMENT("=")
  IntegerLiteral("30")
  SEMICOLON(";")
  NL("\n")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  ASSIGNMENT("=")
  QUOTE_OPEN(""")
  QUOTE_CLOSE(""")
  SEMICOLON(";")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("Unit")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("i")
  AS("as")
  Identifier("Int")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  LPAREN("(")
  Identifier("i")
  IS("is")
  Identifier("Int")
  RPAREN(")")
  ASSIGNMENT("=")
  BooleanLiteral("false")
  NL("\n")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  IntegerLiteral("5")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("canBe")
  LPAREN("(")
  Identifier("i0")
  COLON(":")
  Identifier("Int")
  COMMA(",")
  Identifier("j")
  COLON(":")
  Identifier("Int")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAR("var")
  Identifier("i")
  ASSIGNMENT("=")
  Identifier("i0")
  NL("\n")
  LPAREN("(")
  IdentifierAt("label@")
  Identifier("i")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  LPAREN("(")
  IdentifierAt("label@")
  Identifier("j")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("a")
  ASSIGNMENT("=")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  LPAREN("(")
  IdentifierAt("l@")
  Identifier("a")
  DOT(".")
  Identifier("a")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("3894")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("canBe2")
  LPAREN("(")
  Identifier("j")
  COLON(":")
  Identifier("Int")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  LPAREN("(")
  IdentifierAt("label@")
  Identifier("j")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  CLASS("class")
  Identifier("A")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAR("var")
  Identifier("a")
  COLON(":")
  Identifier("Int")
  ASSIGNMENT("=")
  IntegerLiteral("3")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  CLASS("class")
  Identifier("Test")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  FUN("fun")
  Identifier("testIllegalValues")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IntegerLiteral("1")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("23")
  NL("\n")
  LPAREN("(")
  IdentifierAt("l@")
  IntegerLiteral("1")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("23")
  NL("\n")
  NL("\n")
  Identifier("getInt")
  LPAREN("(")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("343")
  NL("\n")
  LPAREN("(")
  IdentifierAt("f@")
  Identifier("getInt")
  LPAREN("(")
  RPAREN(")")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("343")
  NL("\n")
  NL("\n")
  IntegerLiteral("1")
  INCR("++")
  NL("\n")
  LPAREN("(")
  IdentifierAt("r@")
  IntegerLiteral("1")
  RPAREN(")")
  INCR("++")
  NL("\n")
  NL("\n")
  Identifier("getInt")
  LPAREN("(")
  RPAREN(")")
  INCR("++")
  NL("\n")
  LPAREN("(")
  IdentifierAt("m@")
  Identifier("getInt")
  LPAREN("(")
  RPAREN(")")
  RPAREN(")")
  INCR("++")
  NL("\n")
  NL("\n")
  THIS("this")
  INCR("++")
  NL("\n")
  NL("\n")
  VAR("var")
  Identifier("s")
  COLON(":")
  Identifier("String")
  ASSIGNMENT("=")
  QUOTE_OPEN(""")
  LineStrText("r")
  QUOTE_CLOSE(""")
  NL("\n")
  Identifier("s")
  ADD_ASSIGNMENT("+=")
  QUOTE_OPEN(""")
  LineStrText("ss")
  QUOTE_CLOSE(""")
  NL("\n")
  Identifier("s")
  ADD_ASSIGNMENT("+=")
  THIS("this")
  NL("\n")
  Identifier("s")
  ADD_ASSIGNMENT("+=")
  LPAREN("(")
  IdentifierAt("a@")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("testIncompleteSyntax")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("s")
  ASSIGNMENT("=")
  QUOTE_OPEN(""")
  LineStrText("s")
  QUOTE_CLOSE(""")
  NL("\n")
  INCR("++")
  Identifier("s")
  DOT(".")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("testVariables")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAR("var")
  Identifier("a")
  COLON(":")
  Identifier("Int")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  VAL("val")
  Identifier("b")
  COLON(":")
  Identifier("Int")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  Identifier("a")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("34")
  NL("\n")
  LPAREN("(")
  IdentifierAt("l@")
  Identifier("a")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  Identifier("b")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  Identifier("a")
  INCR("++")
  NL("\n")
  LPAREN("(")
  IdentifierAt("l@")
  Identifier("a")
  RPAREN(")")
  INCR("++")
  NL("\n")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  INCR("++")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("testVariables1")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("b")
  COLON(":")
  Identifier("Int")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  LPAREN("(")
  IdentifierAt("l@")
  Identifier("b")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("34")
  NL("\n")
  NL("\n")
  LPAREN("(")
  Identifier("b")
  RPAREN(")")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("3")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("testArrays")
  LPAREN("(")
  Identifier("a")
  COLON(":")
  Identifier("Array")
  LANGLE("<")
  Identifier("Int")
  RANGLE(">")
  COMMA(",")
  Identifier("ab")
  COLON(":")
  Identifier("Ab")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("a")
  LSQUARE("[")
  IntegerLiteral("3")
  RSQUARE("]")
  ASSIGNMENT("=")
  IntegerLiteral("4")
  NL("\n")
  Identifier("a")
  LSQUARE("[")
  IntegerLiteral("4")
  RSQUARE("]")
  INCR("++")
  NL("\n")
  Identifier("a")
  LSQUARE("[")
  IntegerLiteral("6")
  RSQUARE("]")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("43")
  NL("\n")
  NL("\n")
  Identifier("ab")
  DOT(".")
  Identifier("getArray")
  LPAREN("(")
  RPAREN(")")
  LSQUARE("[")
  IntegerLiteral("54")
  RSQUARE("]")
  ASSIGNMENT("=")
  IntegerLiteral("23")
  NL("\n")
  Identifier("ab")
  DOT(".")
  Identifier("getArray")
  LPAREN("(")
  RPAREN(")")
  LSQUARE("[")
  IntegerLiteral("54")
  RSQUARE("]")
  INCR("++")
  NL("\n")
  NL("\n")
  LPAREN("(")
  IdentifierAt("f@")
  Identifier("a")
  RPAREN(")")
  LSQUARE("[")
  IntegerLiteral("3")
  RSQUARE("]")
  ASSIGNMENT("=")
  IntegerLiteral("4")
  NL("\n")
  NL("\n")
  THIS("this")
  LSQUARE("[")
  IntegerLiteral("54")
  RSQUARE("]")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("Array")
  LANGLE("<")
  Identifier("Int")
  RANGLE(">")
  DOT(".")
  Identifier("checkThis")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  THIS("this")
  LSQUARE("[")
  IntegerLiteral("45")
  RSQUARE("]")
  ASSIGNMENT("=")
  IntegerLiteral("34")
  NL("\n")
  THIS("this")
  LSQUARE("[")
  IntegerLiteral("352")
  RSQUARE("]")
  INCR("++")
  NL("\n")
  THIS("this")
  LSQUARE("[")
  IntegerLiteral("35")
  RSQUARE("]")
  ADD_ASSIGNMENT("+=")
  IntegerLiteral("234")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  ABSTRACT("abstract")
  CLASS("class")
  Identifier("Ab")
  LCURL("{")
  NL("\n")
  ABSTRACT("abstract")
  FUN("fun")
  Identifier("getArray")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Array")
  LANGLE("<")
  Identifier("Int")
  RANGLE(">")
  NL("\n")
  RCURL("}")
  NL("\n")
