File: innerProtectedClass.kt
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            inheritanceModifier
              OPEN("open")
        CLASS("class")
        simpleIdentifier
          Identifier("BaseClass")
        primaryConstructor
          classParameters
            LPAREN("(")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                classDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PROTECTED("protected")
                  CLASS("class")
                  simpleIdentifier
                    Identifier("Nested")
                  primaryConstructor
                    classParameters
                      LPAREN("(")
                      classParameter
                        VAL("val")
                        simpleIdentifier
                          Identifier("x")
                        COLON(":")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("Int")
                      COMMA(",")
                      classParameter
                        modifiers
                          modifier
                            visibilityModifier
                              PROTECTED("protected")
                        VAL("val")
                        simpleIdentifier
                          Identifier("y")
                        COLON(":")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("Int")
                      RPAREN(")")
            semis
              NL("\n")
              NL("\n")
            classMemberDeclaration
              declaration
                functionDeclaration
                  modifiers
                    modifier
                      visibilityModifier
                        PROTECTED("protected")
                  FUN("fun")
                  simpleIdentifier
                    Identifier("foo")
                  functionValueParameters
                    LPAREN("(")
                    RPAREN(")")
                  functionBody
                    ASSIGNMENT("=")
                    expression
                      disjunction
                        conjunction
                          equality
                            comparison
                              infixOperation
                                elvisExpression
                                  infixFunctionCall
                                    rangeExpression
                                      additiveExpression
                                        multiplicativeExpression
                                          asExpression
                                            prefixUnaryExpression
                                              postfixUnaryExpression
                                                primaryExpression
                                                  simpleIdentifier
                                                    Identifier("Nested")
                                                postfixUnarySuffix
                                                  callSuffix
                                                    valueArguments
                                                      LPAREN("(")
                                                      valueArgument
                                                        expression
                                                          disjunction
                                                            conjunction
                                                              equality
                                                                comparison
                                                                  infixOperation
                                                                    elvisExpression
                                                                      infixFunctionCall
                                                                        rangeExpression
                                                                          additiveExpression
                                                                            multiplicativeExpression
                                                                              asExpression
                                                                                prefixUnaryExpression
                                                                                  postfixUnaryExpression
                                                                                    primaryExpression
                                                                                      literalConstant
                                                                                        IntegerLiteral("1")
                                                      COMMA(",")
                                                      valueArgument
                                                        expression
                                                          disjunction
                                                            conjunction
                                                              equality
                                                                comparison
                                                                  infixOperation
                                                                    elvisExpression
                                                                      infixFunctionCall
                                                                        rangeExpression
                                                                          additiveExpression
                                                                            multiplicativeExpression
                                                                              asExpression
                                                                                prefixUnaryExpression
                                                                                  postfixUnaryExpression
                                                                                    primaryExpression
                                                                                      literalConstant
                                                                                        IntegerLiteral("2")
                                                      RPAREN(")")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("Foo")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              constructorInvocation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("BaseClass")
                valueArguments
                  LPAREN("(")
                  RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                functionDeclaration
                  FUN("fun")
                  simpleIdentifier
                    Identifier("bar")
                  functionValueParameters
                    LPAREN("(")
                    RPAREN(")")
                  functionBody
                    block
                      LCURL("{")
                      NL("\n")
                      statements
                        statement
                          declaration
                            propertyDeclaration
                              VAL("val")
                              variableDeclaration
                                simpleIdentifier
                                  Identifier("f")
                              ASSIGNMENT("=")
                              expression
                                disjunction
                                  conjunction
                                    equality
                                      comparison
                                        infixOperation
                                          elvisExpression
                                            infixFunctionCall
                                              rangeExpression
                                                additiveExpression
                                                  multiplicativeExpression
                                                    asExpression
                                                      prefixUnaryExpression
                                                        postfixUnaryExpression
                                                          primaryExpression
                                                            simpleIdentifier
                                                              Identifier("foo")
                                                          postfixUnarySuffix
                                                            callSuffix
                                                              valueArguments
                                                                LPAREN("(")
                                                                RPAREN(")")
                        semis
                          NL("\n")
                        statement
                          expression
                            disjunction
                              conjunction
                                equality
                                  comparison
                                    infixOperation
                                      elvisExpression
                                        infixFunctionCall
                                          rangeExpression
                                            additiveExpression
                                              multiplicativeExpression
                                                asExpression
                                                  prefixUnaryExpression
                                                    postfixUnaryExpression
                                                      primaryExpression
                                                        simpleIdentifier
                                                          Identifier("f")
                                                      postfixUnarySuffix
                                                        navigationSuffix
                                                          memberAccessOperator
                                                            DOT(".")
                                                          simpleIdentifier
                                                            Identifier("x")
                        semis
                          NL("\n")
                        statement
                          expression
                            disjunction
                              conjunction
                                equality
                                  comparison
                                    infixOperation
                                      elvisExpression
                                        infixFunctionCall
                                          rangeExpression
                                            additiveExpression
                                              multiplicativeExpression
                                                asExpression
                                                  prefixUnaryExpression
                                                    postfixUnaryExpression
                                                      primaryExpression
                                                        simpleIdentifier
                                                          Identifier("f")
                                                      postfixUnarySuffix
                                                        navigationSuffix
                                                          memberAccessOperator
                                                            DOT(".")
                                                          simpleIdentifier
                                                            Identifier("y")
                        semis
                          NL("\n")
                      RCURL("}")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
