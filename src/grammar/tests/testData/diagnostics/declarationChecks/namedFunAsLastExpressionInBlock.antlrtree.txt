File: namedFunAsLastExpressionInBlock.kt (WITH_ERRORS)
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("block")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    RPAREN(")")
                  ARROW("->")
                  type
                    parenthesizedType
                      LPAREN("(")
                      type
                        functionType
                          functionTypeParameters
                            LPAREN("(")
                            RPAREN(")")
                          ARROW("->")
                          type
                            typeReference
                              userType
                                simpleUserType
                                  simpleIdentifier
                                    Identifier("Int")
                      RPAREN(")")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("named1")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        functionBody
          block
            LCURL("{")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              jumpExpression
                                                RETURN("return")
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              literalConstant
                                                                                IntegerLiteral("1")
            RCURL("}")
    semis
      NL("\n")
      Identifier("x")
      Identifier("checkType")
      LCURL("{")
      Identifier("_")
      LANGLE("<")
      Identifier("Function1")
      LANGLE("<")
      Identifier("Int")
      COMMA(",")
      Identifier("Int")
      RANGLE(">")
      RANGLE(">")
      LPAREN("(")
      RPAREN(")")
      RCURL("}")
      NL("\n")
      NL("\n")
  Identifier("foo")
  LCURL("{")
  FUN("fun")
  Identifier("named2")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  RCURL("}")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  LCURL("{")
  FUN("fun")
  Identifier("named3")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  RCURL("}")
  RPAREN(")")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x1")
  ASSIGNMENT("=")
  NL("\n")
  IF("if")
  LPAREN("(")
  IntegerLiteral("1")
  EQEQ("==")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("named4")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  ELSE("else")
  NL("\n")
  FUN("fun")
  Identifier("named5")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x2")
  ASSIGNMENT("=")
  NL("\n")
  IF("if")
  LPAREN("(")
  IntegerLiteral("1")
  EQEQ("==")
  IntegerLiteral("1")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  FUN("fun")
  Identifier("named6")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  NL("\n")
  RETURN("return")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  ELSE("else")
  NL("\n")
  FUN("fun")
  Identifier("named7")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x3")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IntegerLiteral("0")
  ARROW("->")
  FUN("fun")
  Identifier("named8")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  ELSE("else")
  ARROW("->")
  FUN("fun")
  Identifier("named9")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x31")
  ASSIGNMENT("=")
  WHEN("when")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IntegerLiteral("0")
  ARROW("->")
  LCURL("{")
  NL("\n")
  FUN("fun")
  Identifier("named10")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  ELSE("else")
  ARROW("->")
  FUN("fun")
  Identifier("named11")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x4")
  ASSIGNMENT("=")
  LCURL("{")
  NL("\n")
  Identifier("y")
  COLON(":")
  Identifier("Int")
  ARROW("->")
  FUN("fun")
  Identifier("named12")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  Identifier("x4")
  Identifier("checkType")
  LCURL("{")
  Identifier("_")
  LANGLE("<")
  Identifier("Function1")
  LANGLE("<")
  Identifier("Int")
  COMMA(",")
  Identifier("Unit")
  RANGLE(">")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  NL("\n")
  LCURL("{")
  Identifier("y")
  COLON(":")
  Identifier("Int")
  ARROW("->")
  FUN("fun")
  Identifier("named14")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("1")
  RCURL("}")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  Identifier("run")
  LPAREN("(")
  Identifier("block")
  COLON(":")
  LPAREN("(")
  RPAREN(")")
  ARROW("->")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("T")
  ASSIGNMENT("=")
  NullLiteral("null")
  EXCL_NO_WS("!")
  EXCL_NO_WS("!")
  NL("\n")
  FUN("fun")
  Identifier("run2")
  LPAREN("(")
  Identifier("block")
  COLON(":")
  LPAREN("(")
  RPAREN(")")
  ARROW("->")
  Identifier("Unit")
  RPAREN(")")
  COLON(":")
  Identifier("Unit")
  ASSIGNMENT("=")
  NullLiteral("null")
  EXCL_NO_WS("!")
  EXCL_NO_WS("!")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("success")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("run")
  LCURL("{")
  FUN("fun")
  Identifier("named1")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  Identifier("run2")
  LCURL("{")
  FUN("fun")
  Identifier("named2")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x")
  ASSIGNMENT("=")
  Identifier("run")
  LCURL("{")
  FUN("fun")
  Identifier("named3")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  RCURL("}")
  NL("\n")
  Identifier("x")
  Identifier("checkType")
  LCURL("{")
  Identifier("_")
  LANGLE("<")
  Identifier("Unit")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
