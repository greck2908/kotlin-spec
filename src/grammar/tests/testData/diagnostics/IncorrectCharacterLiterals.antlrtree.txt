File: IncorrectCharacterLiterals.kt (WITH_ERRORS)
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("ff")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("b")
        ASSIGNMENT("=")
        SINGLE_QUOTE("'")
        SINGLE_QUOTE("'")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("c")
        ASSIGNMENT("=")
        SINGLE_QUOTE("'")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("23")
                              SINGLE_QUOTE("'")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("d")
        ASSIGNMENT("=")
        SINGLE_QUOTE("'")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("a")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("e")
        ASSIGNMENT("=")
        SINGLE_QUOTE("'")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      simpleIdentifier
                                        Identifier("ab")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("f")
        ASSIGNMENT("=")
        SINGLE_QUOTE("'")
        ErrorCharacter("\")
        SINGLE_QUOTE("'")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("test")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  CharacterLiteral("'a'")
  NL("\n")
  CharacterLiteral("'\n'")
  NL("\n")
  CharacterLiteral("'\t'")
  NL("\n")
  CharacterLiteral("'\b'")
  NL("\n")
  CharacterLiteral("'\r'")
  NL("\n")
  CharacterLiteral("'\"'")
  NL("\n")
  CharacterLiteral("'\''")
  NL("\n")
  CharacterLiteral("'\\'")
  NL("\n")
  CharacterLiteral("'\$'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("x")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  IntegerLiteral("123")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("ra")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  IntegerLiteral("0")
  IntegerLiteral("0")
  IntegerLiteral("0")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  IntegerLiteral("0")
  IntegerLiteral("0")
  IntegerLiteral("0")
  SINGLE_QUOTE("'")
  NL("\n")
  CharacterLiteral("'\u0000'")
  NL("\n")
  CharacterLiteral("'\u000a'")
  NL("\n")
  CharacterLiteral("'\u000A'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("u")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("u0")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("u00")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("u000")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  Identifier("u000z")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  ErrorCharacter("\")
  Identifier("u000")
  SINGLE_QUOTE("'")
  NL("\n")
  SINGLE_QUOTE("'")
  ErrorCharacter("\")
  SINGLE_QUOTE("'")
  NL("\n")
  RCURL("}")
  NL("\n")
