File: conflictingReturnType.kt
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        simpleIdentifier
          Identifier("A")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                functionDeclaration
                  FUN("fun")
                  simpleIdentifier
                    Identifier("foo")
                  functionValueParameters
                    LPAREN("(")
                    RPAREN(")")
                  COLON(":")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("CharSequence")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        INTERFACE("interface")
        simpleIdentifier
          Identifier("B")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                functionDeclaration
                  FUN("fun")
                  simpleIdentifier
                    Identifier("foo")
                  functionValueParameters
                    LPAREN("(")
                    RPAREN(")")
                  COLON(":")
                  type
                    nullableType
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("String")
                      quest
                        QUEST_NO_WS("?")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("test")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("c")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Any")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          infixOperation
                            elvisExpression
                              infixFunctionCall
                                rangeExpression
                                  additiveExpression
                                    multiplicativeExpression
                                      asExpression
                                        prefixUnaryExpression
                                          postfixUnaryExpression
                                            primaryExpression
                                              ifExpression
                                                IF("if")
                                                LPAREN("(")
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("c")
                                                            isOperator
                                                              IS("is")
                                                            type
                                                              typeReference
                                                                userType
                                                                  simpleUserType
                                                                    simpleIdentifier
                                                                      Identifier("B")
                                                      CONJ("&&")
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("c")
                                                            isOperator
                                                              IS("is")
                                                            type
                                                              typeReference
                                                                userType
                                                                  simpleUserType
                                                                    simpleIdentifier
                                                                      Identifier("A")
                                                RPAREN(")")
                                                controlStructureBody
                                                  block
                                                    LCURL("{")
                                                    NL("\n")
                                                    statements
                                                      statement
                                                        expression
                                                          disjunction
                                                            conjunction
                                                              equality
                                                                comparison
                                                                  infixOperation
                                                                    elvisExpression
                                                                      infixFunctionCall
                                                                        rangeExpression
                                                                          additiveExpression
                                                                            multiplicativeExpression
                                                                              asExpression
                                                                                prefixUnaryExpression
                                                                                  postfixUnaryExpression
                                                                                    primaryExpression
                                                                                      simpleIdentifier
                                                                                        Identifier("c")
                                                                                    postfixUnarySuffix
                                                                                      navigationSuffix
                                                                                        memberAccessOperator
                                                                                          DOT(".")
                                                                                        simpleIdentifier
                                                                                          Identifier("foo")
                                                                                    postfixUnarySuffix
                                                                                      callSuffix
                                                                                        valueArguments
                                                                                          LPAREN("(")
                                                                                          RPAREN(")")
                                                      semis
                                                        NL("\n")
                                                    RCURL("}")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
