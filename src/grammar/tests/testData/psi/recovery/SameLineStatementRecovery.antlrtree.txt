File: SameLineStatementRecovery.kt
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("f1")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("a")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("12")
                              IF("if")
                              LPAREN("(")
        Identifier("a")
        EQEQ("==")
        IntegerLiteral("12")
        RPAREN(")")
        LCURL("{")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f2")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("a")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  FOR("for")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("array")
  LPAREN("(")
  IntegerLiteral("12")
  COMMA(",")
  IntegerLiteral("13")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f3")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  IntegerLiteral("12")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  RCURL("}")
  CLASS("class")
  Identifier("A")
  LCURL("{")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("b2")
  COLON(":")
  Identifier("Int")
  ANNOTATION("annotation")
  CLASS("class")
  Identifier("Annotation")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f4")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("a")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  VAL("val")
  Identifier("b")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a1")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  VAL("val")
  Identifier("b1")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f6")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IntegerLiteral("3")
  ADD("+")
  IntegerLiteral("4")
  IntegerLiteral("33")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f7")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  FUN("fun")
  Identifier("f8")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f9")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  FUN("fun")
  Identifier("local1")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  FUN("fun")
  Identifier("local2")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  FUN("fun")
  Identifier("local3")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  OPEN("open")
  FUN("fun")
  Identifier("local4")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  CLASS("class")
  Identifier("GA")
  CLASS("class")
  Identifier("GB")
  NL("\n")
  FUN("fun")
  Identifier("f10")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  CLASS("class")
  Identifier("LA")
  LCURL("{")
  RCURL("}")
  CLASS("class")
  Identifier("LB")
  NL("\n")
  CLASS("class")
  Identifier("LC")
  CLASS("class")
  Identifier("LD")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f11")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("a1")
  COLON(":")
  Identifier("Int")
  AS("as")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a2")
  COLON(":")
  Identifier("Int")
  IN("in")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a3")
  COLON(":")
  Identifier("Int")
  NOT_IN("!in ")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a4")
  COLON(":")
  Identifier("Int")
  IS("is")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a5")
  COLON(":")
  Identifier("Int")
  NOT_IS("!is ")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a6")
  COLON(":")
  Identifier("Int")
  AS("as")
  IntegerLiteral("12")
  NL("\n")
  VAL("val")
  Identifier("a7")
  COLON(":")
  Identifier("Int")
  AS_SAFE("as?")
  IntegerLiteral("12")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f12")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("a")
  ASSIGNMENT("=")
  IntegerLiteral("12")
  RETURN("return")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("g")
  COLON(":")
  Identifier("Int")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("12")
  RCURL("}")
  NL("\n")
  FUN("fun")
  Identifier("f13")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("l")
  COLON(":")
  Identifier("Int")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RETURN("return")
  IntegerLiteral("12")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("f13")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("l")
  COLON(":")
  Identifier("Int")
  BY("by")
  Identifier("Some")
  NL("\n")
  RCURL("}")
  NL("\n")
