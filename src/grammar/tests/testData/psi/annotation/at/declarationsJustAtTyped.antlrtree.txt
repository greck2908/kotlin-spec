File: declarationsJustAtTyped.kt
  packageHeader
  importList
  topLevelObject
    declaration
  topLevelObject
    declaration
      PRIVATE("private")
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          annotation
            multiAnnotation
              AT("@")
              LSQUARE("[")
              unescapedAnnotation
                constructorInvocation
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Ann1")
                  valueArguments
                    LPAREN("(")
                    valueArgument
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    literalConstant
                                                      IntegerLiteral("1")
                    RPAREN(")")
              RSQUARE("]")
          annotation
            singleAnnotation
              AT("@")
              unescapedAnnotation
                constructorInvocation
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Ann3")
                  valueArguments
                    LPAREN("(")
                    valueArgument
                      expression
                        disjunction
                          conjunction
                            equality
                              comparison
                                infixOperation
                                  elvisExpression
                                    infixFunctionCall
                                      rangeExpression
                                        additiveExpression
                                          multiplicativeExpression
                                            asExpression
                                              prefixUnaryExpression
                                                postfixUnaryExpression
                                                  primaryExpression
                                                    stringLiteral
                                                      lineStringLiteral
                                                        QUOTE_OPEN(""")
                                                        lineStringContent
                                                          LineStrText("2")
                                                        QUOTE_CLOSE(""")
                    RPAREN(")")
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            PRIVATE("private")
              VAL("val")
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            COMMA(",")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            PRIVATE("private")
              VAR("var")
              simpleIdentifier
                Identifier("y")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            COMMA(",")
            classParameter
              modifiers
                annotation
                  singleAnnotation
                    AT("@")
                    unescapedAnnotation
                      userType
                        simpleUserType
                          simpleIdentifier
                            OPEN("open")
              simpleIdentifier
                Identifier("z")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("Int")
            RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
  topLevelObject
    declaration
      AT("@")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("LocalClass")
    semis
      NL("\n")
      NL("\n")
  Identifier("print")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  NL("\n")
  NL("\n")
  AT("@")
  NL("\n")
  NL("\n")
  AT("@")
  LSQUARE("[")
  Identifier("inline2")
  RSQUARE("]")
  PRIVATE("private")
  NL("\n")
  FUN("fun")
  Identifier("inlineLocal")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  AT("@")
  LSQUARE("[")
  Identifier("Ann")
  RSQUARE("]")
  NL("\n")
  PRIVATE("private")
  NL("\n")
  AT("@")
  NL("\n")
  AT("@")
  Identifier("Volatile")
  VAR("var")
  Identifier("x")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  NL("\n")
  Identifier("foo")
  LPAREN("(")
  FUN("fun")
  LPAREN("(")
  AT("@")
  AT("@")
  Identifier("ann")
  LPAREN("(")
  IntegerLiteral("1")
  RPAREN(")")
  Identifier("x")
  COLON(":")
  Identifier("Int")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FOR("for")
  LPAREN("(")
  AT("@")
  Identifier("x")
  IN("in")
  IntegerLiteral("1")
  RANGE("..")
  IntegerLiteral("100")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  VAL("val")
  Identifier("x")
  COLON(":")
  Identifier("Int")
  NL("\n")
  AT("@")
  PRIVATE("private")
  AT("@")
  OPEN("open")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  IntegerLiteral("1")
  NL("\n")
  RCURL("}")
  NL("\n")
