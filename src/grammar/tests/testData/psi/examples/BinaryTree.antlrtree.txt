File: BinaryTree.kt
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("BinaryTree")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("IMutableSet")
                  typeArguments
                    LANGLE("<")
                    typeProjection
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("T")
                    RANGLE(">")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            visibilityModifier
              PRIVATE("private")
        CLASS("class")
        simpleIdentifier
          Identifier("TreeNode")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              VAR("var")
              simpleIdentifier
                Identifier("value")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
            COMMA(",")
            classParameter
              VAR("var")
              simpleIdentifier
                Identifier("parent")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("TreeNode")
            RPAREN(")")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAR("var")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("left")
                    COLON(":")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("TreeNode")
                  NL("\n")
            classMemberDeclaration
              declaration
                propertyDeclaration
                  VAR("var")
                  variableDeclaration
                    simpleIdentifier
                      Identifier("right")
                    COLON(":")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("TreeNode")
                  NL("\n")
                  NL("\n")
          RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          modifier
            visibilityModifier
              PRIVATE("private")
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("compare")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("MatchableComparison")
                  typeArguments
                    LANGLE("<")
                    typeProjection
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("T")
                    RANGLE(">")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          modifier
            visibilityModifier
              PRIVATE("private")
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("root")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("TreeNode")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        modifiers
          modifier
            visibilityModifier
              PRIVATE("private")
        VAR("var")
        variableDeclaration
          simpleIdentifier
            Identifier("version")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("0")
    semis
      NL("\n")
      NL("\n")
      NL("\n")
      NL("\n")
  CONSTRUCTOR("constructor")
  LPAREN("(")
  Identifier("compare")
  COLON(":")
  Identifier("Comparison")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  THIS("this")
  DOT(".")
  Identifier("compare")
  ASSIGNMENT("=")
  Identifier("asMatchableComparison")
  LPAREN("(")
  Identifier("comparison")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  CONSTRUCTOR("constructor")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  THIS("this")
  LPAREN("(")
  Identifier("naturalOrder")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  PRIVATE("private")
  AT("@")
  LSQUARE("[")
  OPERATOR("operator")
  RSQUARE("]")
  FUN("fun")
  Identifier("T")
  DOT(".")
  Identifier("compareTo")
  LPAREN("(")
  Identifier("other")
  COLON(":")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("Int")
  ASSIGNMENT("=")
  Identifier("compare")
  LPAREN("(")
  Identifier("this")
  COMMA(",")
  Identifier("other")
  RPAREN(")")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("contains")
  LPAREN("(")
  Identifier("item")
  COLON(":")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  RETURN("return")
  Identifier("contains")
  LPAREN("(")
  Identifier("root")
  COMMA(",")
  Identifier("item")
  RPAREN(")")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("contains")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  COMMA(",")
  Identifier("item")
  COLON(":")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  RETURN("return")
  BooleanLiteral("false")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("compare")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  DOT(".")
  Identifier("value")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("EQ")
  ARROW("->")
  BooleanLiteral("true")
  NL("\n")
  Identifier("LS")
  ARROW("->")
  Identifier("contains")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  COMMA(",")
  Identifier("item")
  RPAREN(")")
  NL("\n")
  Identifier("GT")
  ARROW("->")
  Identifier("contains")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("right")
  COMMA(",")
  Identifier("item")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("add")
  LPAREN("(")
  Identifier("item")
  COLON(":")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("add")
  LPAREN("(")
  Identifier("Ref")
  LPAREN("(")
  Identifier("root")
  RPAREN(")")
  COMMA(",")
  NullLiteral("null")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("size")
  INCR("++")
  NL("\n")
  Identifier("version")
  INCR("++")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  RCURL("}")
  NL("\n")
  RETURN("return")
  BooleanLiteral("false")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("add")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("Ref")
  LANGLE("<")
  Identifier("TreeNode")
  QUEST_NO_WS("?")
  RANGLE(">")
  COMMA(",")
  Identifier("parent")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("value")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("node")
  DOT(".")
  Identifier("value")
  ASSIGNMENT("=")
  Identifier("TreeNode")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("parent")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  RCURL("}")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("compare")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  DOT(".")
  Identifier("value")
  DOT(".")
  Identifier("value")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("EQ")
  ARROW("->")
  BooleanLiteral("false")
  NL("\n")
  Identifier("LS")
  ARROW("->")
  Identifier("add")
  LPAREN("(")
  Identifier("ref")
  Identifier("node")
  DOT(".")
  Identifier("value")
  DOT(".")
  Identifier("left")
  COMMA(",")
  Identifier("node")
  RPAREN(")")
  NL("\n")
  Identifier("GT")
  ARROW("->")
  Identifier("add")
  LPAREN("(")
  Identifier("ref")
  Identifier("node")
  DOT(".")
  Identifier("value")
  DOT(".")
  Identifier("right")
  COMMA(",")
  Identifier("node")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("addNoRef")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("root")
  ASSIGNMENT("=")
  Identifier("TreeNode")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  RCURL("}")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("compare")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  DOT(".")
  Identifier("value")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("EQ")
  ARROW("->")
  RETURN("return")
  BooleanLiteral("false")
  NL("\n")
  Identifier("LS")
  ARROW("->")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("node")
  DOT(".")
  Identifier("left")
  ASSIGNMENT("=")
  Identifier("TreeNode")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  RCURL("}")
  ELSE("else")
  RETURN("return")
  Identifier("add")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  RPAREN(")")
  NL("\n")
  Identifier("GT")
  ARROW("->")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("right")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("node")
  DOT(".")
  Identifier("right")
  ASSIGNMENT("=")
  Identifier("TreeNode")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  RCURL("}")
  ELSE("else")
  RETURN("return")
  Identifier("add")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("right")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("remove")
  LPAREN("(")
  Identifier("item")
  COLON(":")
  Identifier("T")
  RPAREN(")")
  COLON(":")
  Identifier("Boolean")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("toRemove")
  ASSIGNMENT("=")
  Identifier("find")
  LPAREN("(")
  Identifier("root")
  COMMA(",")
  Identifier("item")
  RPAREN(")")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("toRemove")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  RETURN("return")
  BooleanLiteral("false")
  NL("\n")
  Identifier("remove")
  LPAREN("(")
  Identifier("toRemove")
  RPAREN(")")
  NL("\n")
  Identifier("size")
  DECR("--")
  NL("\n")
  Identifier("version")
  INCR("++")
  NL("\n")
  RETURN("return")
  BooleanLiteral("true")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("find")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  COLON(":")
  Identifier("TreeNode")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  RETURN("return")
  NullLiteral("null")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("compare")
  LPAREN("(")
  Identifier("item")
  COMMA(",")
  Identifier("node")
  DOT(".")
  Identifier("value")
  RPAREN(")")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("EQ")
  ARROW("->")
  Identifier("node")
  NL("\n")
  Identifier("LS")
  ARROW("->")
  Identifier("find")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  RPAREN(")")
  NL("\n")
  Identifier("GT")
  ARROW("->")
  Identifier("find")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("right")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  PRIVATE("private")
  FUN("fun")
  Identifier("remove")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  WHEN("when")
  LPAREN("(")
  Identifier("node")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("replace")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  COMMA(",")
  Identifier("replace")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  EQEQ("==")
  Identifier("root")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("root")
  ASSIGNMENT("=")
  Identifier("replace")
  NL("\n")
  RETURN("return")
  NL("\n")
  RCURL("}")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("parent")
  DOT(".")
  Identifier("left")
  EQEQ("==")
  Identifier("node")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("node")
  DOT(".")
  Identifier("parent")
  DOT(".")
  Identifier("left")
  ASSIGNMENT("=")
  Identifier("replace")
  NL("\n")
  RCURL("}")
  ELSE("else")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("parent")
  DOT(".")
  Identifier("right")
  EQEQ("==")
  Identifier("node")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("node")
  DOT(".")
  Identifier("parent")
  DOT(".")
  Identifier("right")
  ASSIGNMENT("=")
  Identifier("replace")
  NL("\n")
  RCURL("}")
  ELSE("else")
  Identifier("Assert")
  LPAREN("(")
  BooleanLiteral("false")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  NL("\n")
  PRIVATE("private")
  FUN("fun")
  Identifier("min")
  LPAREN("(")
  Identifier("node")
  COLON(":")
  Identifier("TreeNode")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  Identifier("node")
  ELSE("else")
  Identifier("min")
  LPAREN("(")
  Identifier("node")
  DOT(".")
  Identifier("left")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("iterator")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("IIterator")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  ASSIGNMENT("=")
  Identifier("mutableIterator")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("mutableIterator")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("IMutableIterator")
  LANGLE("<")
  Identifier("T")
  RANGLE(">")
  ASSIGNMENT("=")
  OBJECT("object")
  COLON(":")
  Identifier("IMutableIterator")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("version")
  ASSIGNMENT("=")
  Identifier("BinaryTree")
  DOT(".")
  THIS("this")
  DOT(".")
  Identifier("version")
  NL("\n")
  VAL("val")
  Identifier("down")
  ASSIGNMENT("=")
  Identifier("Stack")
  LANGLE("<")
  Identifier("TreeNode")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  VAL("val")
  Identifier("up")
  ASSIGNMENT("=")
  Identifier("Stack")
  LANGLE("<")
  Identifier("TreeNode")
  RANGLE(">")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  VAR("var")
  Identifier("lastNode")
  COLON(":")
  Identifier("TreeNode")
  NL("\n")
  NL("\n")
  INIT("init")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("root")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  Identifier("down")
  DOT(".")
  Identifier("push")
  LPAREN("(")
  Identifier("root")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("next")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("T")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  EXCL_NO_WS("!")
  Identifier("hasNext")
  RPAREN(")")
  NL("\n")
  THROW("throw")
  Identifier("NoMoreElementsException")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  Identifier("checkVersion")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  NL("\n")
  Identifier("lastNode")
  ASSIGNMENT("=")
  Identifier("nextNode")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RETURN("return")
  Identifier("lastNode")
  DOT(".")
  Identifier("value")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  PRIVATE("private")
  FUN("fun")
  Identifier("nextNode")
  LPAREN("(")
  RPAREN(")")
  COLON(":")
  Identifier("TreeNode")
  LCURL("{")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  BooleanLiteral("true")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  EXCL_NO_WS("!")
  Identifier("down")
  DOT(".")
  Identifier("isEmpty")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("curNode")
  ASSIGNMENT("=")
  Identifier("down")
  DOT(".")
  Identifier("pop")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("left")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("up")
  DOT(".")
  Identifier("push")
  LPAREN("(")
  Identifier("curNode")
  RPAREN(")")
  NL("\n")
  Identifier("down")
  DOT(".")
  Identifier("push")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("left")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  ELSE("else")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("right")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("down")
  DOT(".")
  Identifier("push")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("right")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RETURN("return")
  Identifier("curNode")
  SEMICOLON(";")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  ELSE("else")
  LCURL("{")
  NL("\n")
  VAL("val")
  Identifier("curNode")
  ASSIGNMENT("=")
  Identifier("up")
  DOT(".")
  Identifier("pop")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("right")
  EXCL_EQ("!=")
  NullLiteral("null")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("down")
  DOT(".")
  Identifier("push")
  LPAREN("(")
  Identifier("curNode")
  DOT(".")
  Identifier("right")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RETURN("return")
  Identifier("curNode")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  VAL("val")
  Identifier("hasNext")
  COLON(":")
  Identifier("Boolean")
  NL("\n")
  GETTER("get")
  LPAREN("(")
  RPAREN(")")
  ASSIGNMENT("=")
  EXCL_NO_WS("!")
  Identifier("down")
  DOT(".")
  Identifier("isEmpty")
  DISJ("||")
  EXCL_NO_WS("!")
  Identifier("up")
  DOT(".")
  Identifier("isEmpty")
  NL("\n")
  NL("\n")
  NL("\n")
  OVERRIDE("override")
  FUN("fun")
  Identifier("remove")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("checkVersion")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("lastNode")
  EQEQ("==")
  NullLiteral("null")
  RPAREN(")")
  NL("\n")
  THROW("throw")
  Identifier("IterationException")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("Nothing to remove")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  Identifier("remove")
  LPAREN("(")
  Identifier("lastNode")
  RPAREN(")")
  NL("\n")
  Identifier("version")
  INCR("++")
  NL("\n")
  Identifier("BinaryTree")
  DOT(".")
  THIS("this")
  DOT(".")
  Identifier("version")
  ASSIGNMENT("=")
  Identifier("version")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  PRIVATE("private")
  FUN("fun")
  Identifier("checkVersion")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("version")
  EXCL_EQ("!=")
  Identifier("BinaryTree")
  DOT(".")
  Identifier("this")
  DOT(".")
  Identifier("version")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  THROW("throw")
  Identifier("ConcurrentModificationException")
  LPAREN("(")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  RCURL("}")
