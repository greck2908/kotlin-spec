File: StringTemplates.kt
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("demo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("abc")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("a")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      stringLiteral
                                        lineStringLiteral
                                          QUOTE_OPEN(""")
                                          QUOTE_CLOSE(""")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("asd")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("bar")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("5")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("map")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("f")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    RPAREN(")")
                  ARROW("->")
                  type
                    nullableType
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Any")
                      quest
                        QUEST_NO_WS("?")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("buzz")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("f")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    RPAREN(")")
                  ARROW("->")
                  type
                    nullableType
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("Any")
                      quest
                        QUEST_NO_WS("?")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("Int")
        functionBody
          ASSIGNMENT("=")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("sdf")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("1")
    semis
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("foo")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  infixOperation
                    elvisExpression
                      infixFunctionCall
                        rangeExpression
                          additiveExpression
                            multiplicativeExpression
                              asExpression
                                prefixUnaryExpression
                                  postfixUnaryExpression
                                    primaryExpression
                                      literalConstant
                                        IntegerLiteral("3")
    semis
      SEMICOLON(";")
      NL("\n")
  QUOTE_OPEN(""")
  LineStrRef("$this")
  LineStrText(" must be")
  LineStrRef("$as")
  LineStrRef("$t")
  QUOTE_CLOSE(""")
  NL("\n")
  QUOTE_OPEN(""")
  LineStrRef("$abc")
  QUOTE_CLOSE(""")
  NL("\n")
  QUOTE_OPEN(""")
  LineStrRef("$abc")
  LineStrEscapedChar("\"")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  ErrorCharacter("$")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  ErrorCharacter("$")
  DOT(".")
  ErrorCharacter("$")
  DOT(".")
  Identifier("asdf")
  ErrorCharacter("$")
  ErrorCharacter("\")
  Identifier("t")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("asd")
  ErrorCharacter("\")
  ErrorCharacter("$")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("asd")
  FieldIdentifier("$a")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("asd")
  FieldIdentifier("$a")
  FieldIdentifier("$asd")
  ErrorCharacter("$")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("fosdfasdo")
  ErrorCharacter("$")
  LCURL("{")
  IntegerLiteral("1")
  ADD("+")
  Identifier("bar")
  ADD("+")
  IntegerLiteral("100")
  RCURL("}")
  RCURL("}")
  Identifier("sdsdfgdsfsdf")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("foo")
  ErrorCharacter("$")
  LCURL("{")
  Identifier("bar")
  ADD("+")
  Identifier("map")
  LCURL("{")
  Identifier("foo")
  RCURL("}")
  RCURL("}")
  Identifier("sdfsdf")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("foo")
  ErrorCharacter("$")
  LCURL("{")
  Identifier("bar")
  ADD("+")
  Identifier("map")
  LCURL("{")
  QUOTE_OPEN(""")
  LineStrText("foo")
  QUOTE_CLOSE(""")
  RCURL("}")
  RCURL("}")
  Identifier("sdfsdf")
  QUOTE_OPEN(""")
  LineStrText("\n    ")
  QUOTE_CLOSE(""")
  Identifier("foo")
  ErrorCharacter("$")
  LCURL("{")
  Identifier("bar")
  ADD("+")
  Identifier("map")
  LCURL("{")
  NL("\n")
  QUOTE_OPEN(""")
  LineStrText("foo")
  LineStrRef("$sdf")
  LineStrExprStart("${")
  Identifier("buzz")
  LCURL("{")
  RCURL("}")
  RCURL("}")
  QUOTE_CLOSE(""")
  RCURL("}")
  RCURL("}")
  Identifier("sdfsdf")
  QUOTE_OPEN(""")
  LineStrText("\n}")
