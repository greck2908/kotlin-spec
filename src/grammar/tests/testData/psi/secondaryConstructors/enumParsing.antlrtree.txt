File: enumParsing.kt
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        modifiers
          modifier
            classModifier
              ENUM("enum")
        CLASS("class")
        simpleIdentifier
          Identifier("A")
        enumClassBody
          LCURL("{")
          NL("\n")
          enumEntries
            enumEntry
              simpleIdentifier
                Identifier("abc1")
              valueArguments
                LPAREN("(")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
                COMMA(",")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("2")
                COMMA(",")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("3")
                RPAREN(")")
            COMMA(",")
            NL("\n")
            enumEntry
              simpleIdentifier
                Identifier("abc2")
              valueArguments
                LPAREN("(")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("1")
                COMMA(",")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("2")
                COMMA(",")
                valueArgument
                  expression
                    disjunction
                      conjunction
                        equality
                          comparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                literalConstant
                                                  IntegerLiteral("3")
                RPAREN(")")
              classBody
                LCURL("{")
                classMemberDeclarations
                RCURL("}")
            COMMA(",")
            NL("\n")
            enumEntry
              simpleIdentifier
                Identifier("abc3")
          SEMICOLON(";")
          NL("\n")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              secondaryConstructor
                CONSTRUCTOR("constructor")
                functionValueParameters
                  LPAREN("(")
                  functionValueParameter
                    parameter
                      simpleIdentifier
                        Identifier("x")
                      COLON(":")
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                  RPAREN(")")
                block
                  LCURL("{")
                  statements
                  RCURL("}")
            semis
              NL("\n")
              NL("\n")
            classMemberDeclaration
              anonymousInitializer
                INIT("init")
                block
                  LCURL("{")
                  statements
                  RCURL("}")
            semis
              NL("\n")
              NL("\n")
            classMemberDeclaration
              secondaryConstructor
                CONSTRUCTOR("constructor")
                functionValueParameters
                  LPAREN("(")
                  functionValueParameter
                    parameter
                      simpleIdentifier
                        Identifier("x")
                      COLON(":")
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("Int")
                  RPAREN(")")
                COLON(":")
                constructorDelegationCall
                  THIS("this")
                  valueArguments
                    LPAREN("(")
                    RPAREN(")")
                block
                  LCURL("{")
                  statements
                  RCURL("}")
            semis
              NL("\n")
            classMemberDeclaration
              anonymousInitializer
                INIT("init")
                block
                  LCURL("{")
                  NL("\n")
                  NL("\n")
                  statements
                  RCURL("}")
            semis
              NL("\n")
          RCURL("}")
    semis
      NL("\n")
  EOF("<EOF>")
