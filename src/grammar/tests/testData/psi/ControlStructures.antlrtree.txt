File: ControlStructures.kt
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("a")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            THROW("throw")
                                            expression
                                              disjunction
                                                conjunction
                                                  equality
                                                    comparison
                                                      infixOperation
                                                        elvisExpression
                                                          infixFunctionCall
                                                            rangeExpression
                                                              additiveExpression
                                                                multiplicativeExpression
                                                                  asExpression
                                                                    prefixUnaryExpression
                                                                      postfixUnaryExpression
                                                                        primaryExpression
                                                                          simpleIdentifier
                                                                            Identifier("Foo")
                                                                        postfixUnarySuffix
                                                                          callSuffix
                                                                            valueArguments
                                                                              LPAREN("(")
                                                                              RPAREN(")")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            RETURN("return")
                                            expression
                                              disjunction
                                                conjunction
                                                  equality
                                                    comparison
                                                      infixOperation
                                                        elvisExpression
                                                          infixFunctionCall
                                                            rangeExpression
                                                              additiveExpression
                                                                multiplicativeExpression
                                                                  asExpression
                                                                    prefixUnaryExpression
                                                                      postfixUnaryExpression
                                                                        primaryExpression
                                                                          literalConstant
                                                                            IntegerLiteral("10")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            BREAK("break")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            BREAK_AT("break@la")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            CONTINUE("continue")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          jumpExpression
                                            CONTINUE_AT("continue@la")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          ifExpression
                                            IF("if")
                                            LPAREN("(")
                                            expression
                                              disjunction
                                                conjunction
                                                  equality
                                                    comparison
                                                      infixOperation
                                                        elvisExpression
                                                          infixFunctionCall
                                                            rangeExpression
                                                              additiveExpression
                                                                multiplicativeExpression
                                                                  asExpression
                                                                    prefixUnaryExpression
                                                                      postfixUnaryExpression
                                                                        primaryExpression
                                                                          literalConstant
                                                                            IntegerLiteral("10")
                                            RPAREN(")")
                                            controlStructureBody
                                              statement
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("foo")
                                            ELSE("else")
                                            controlStructureBody
                                              statement
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("bar")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("a")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("foo")
            ASSIGNMENT("=")
            expression
              disjunction
                conjunction
                  equality
                    comparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          ifExpression
                                            IF("if")
                                            LPAREN("(")
                                            expression
                                              disjunction
                                                conjunction
                                                  equality
                                                    comparison
                                                      infixOperation
                                                        elvisExpression
                                                          infixFunctionCall
                                                            rangeExpression
                                                              additiveExpression
                                                                multiplicativeExpression
                                                                  asExpression
                                                                    prefixUnaryExpression
                                                                      postfixUnaryExpression
                                                                        primaryExpression
                                                                          literalConstant
                                                                            IntegerLiteral("10")
                                            RPAREN(")")
                                            controlStructureBody
                                              statement
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          infixOperation
                                                            elvisExpression
                                                              infixFunctionCall
                                                                rangeExpression
                                                                  additiveExpression
                                                                    multiplicativeExpression
                                                                      asExpression
                                                                        prefixUnaryExpression
                                                                          postfixUnaryExpression
                                                                            primaryExpression
                                                                              simpleIdentifier
                                                                                Identifier("foo")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  RETURN("return")
  IntegerLiteral("10")
  NL("\n")
  RETURN("return")
  NL("\n")
  IntegerLiteral("10")
  NL("\n")
  BREAK("break")
  NL("\n")
  IdentifierAt("la@")
  NL("\n")
  BREAK_AT("break@la")
  NL("\n")
  CONTINUE("continue")
  NL("\n")
  IdentifierAt("la@")
  NL("\n")
  CONTINUE_AT("continue@la")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  NL("\n")
  Identifier("bar")
  NL("\n")
  ELSE("else")
  NL("\n")
  Identifier("foo")
  NL("\n")
  ELSE("else")
  IF("if")
  LPAREN("(")
  Identifier("foo")
  RPAREN(")")
  NL("\n")
  Identifier("bar")
  NL("\n")
  ELSE("else")
  NL("\n")
  Identifier("bar")
  NL("\n")
  NL("\n")
  TRY("try")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  TRY("try")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  TRY("try")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  CATCH("catch")
  LPAREN("(")
  Identifier("Foo")
  COLON(":")
  Identifier("Bar")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  FINALLY("finally")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  TRY("try")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  FINALLY("finally")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FOR("for")
  LPAREN("(")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("x")
        IN("in")
        Identifier("foo")
        RPAREN(")")
        Identifier("a")
    semis
      NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("x")
  IN("in")
  Identifier("foo")
  RPAREN(")")
  Identifier("a")
  NL("\n")
  FOR("for")
  LPAREN("(")
  VAL("val")
  Identifier("x")
  COLON(":")
  Identifier("Int")
  IN("in")
  Identifier("foo")
  RPAREN(")")
  Identifier("a")
  NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("x")
  COLON(":")
  Identifier("Int")
  IN("in")
  Identifier("foo")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  BooleanLiteral("true")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  DO("do")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  WHILE("while")
  LPAREN("(")
  BooleanLiteral("false")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FUN("fun")
  Identifier("foo")
  LPAREN("(")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  NL("\n")
  NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  FOR("for")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  SEMICOLON(";")
  NL("\n")
  Identifier("b")
  NL("\n")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  NL("\n")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  Identifier("b")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  Identifier("a")
  IN("in")
  Identifier("b")
  RPAREN(")")
  SEMICOLON(";")
  NL("\n")
  Identifier("b")
  NL("\n")
  NL("\n")
  WHILE("while")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  LCURL("{")
  RCURL("}")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  NL("\n")
  ELSE("else")
  NL("\n")
  Identifier("c")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  Identifier("b")
  ELSE("else")
  Identifier("c")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  Identifier("b")
  NL("\n")
  ELSE("else")
  Identifier("c")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  SEMICOLON(";")
  NL("\n")
  ELSE("else")
  NL("\n")
  Identifier("c")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  Identifier("b")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  Identifier("b")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  ELSE("else")
  Identifier("c")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  Identifier("c")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  SEMICOLON(";")
  NL("\n")
  ELSE("else")
  Identifier("c")
  NL("\n")
  IF("if")
  LPAREN("(")
  Identifier("a")
  RPAREN(")")
  NL("\n")
  ELSE("else")
  SEMICOLON(";")
  NL("\n")
  NL("\n")
  DO("do")
  WHILE("while")
  LPAREN("(")
  Identifier("r")
  RPAREN(")")
  NL("\n")
  DO("do")
  Identifier("foo")
  WHILE("while")
  LPAREN("(")
  Identifier("r")
  RPAREN(")")
  NL("\n")
  DO("do")
  LCURL("{")
  DOUBLE_SEMICOLON(";;")
  SEMICOLON(";")
  Identifier("foo")
  SEMICOLON(";")
  Identifier("bar")
  DOUBLE_SEMICOLON(";;")
  DOUBLE_SEMICOLON(";;")
  RCURL("}")
  WHILE("while")
  LPAREN("(")
  Identifier("r")
  RPAREN(")")
  NL("\n")
  RCURL("}")
